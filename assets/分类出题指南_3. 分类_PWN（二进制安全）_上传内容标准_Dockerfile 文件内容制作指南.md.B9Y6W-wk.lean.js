import{_ as e,c as s,ab as n,o as p}from"./chunks/framework.B0GWKKDs.js";const l="/assets/2_Dockerfile%20%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%88%B6%E4%BD%9C%E6%8C%87%E5%8D%97_image.CUQtbyfY.png",o="/assets/3_Dockerfile%20%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%88%B6%E4%BD%9C%E6%8C%87%E5%8D%97_image.J2nlFW_R.png",k=JSON.parse('{"title":"Dockerfile 文件内容制作指南","description":"","frontmatter":{},"headers":[],"relativePath":"分类出题指南/3. 分类/PWN（二进制安全）/上传内容标准/Dockerfile 文件内容制作指南.md","filePath":"分类出题指南/3. 分类/PWN（二进制安全）/上传内容标准/Dockerfile 文件内容制作指南.md","lastUpdated":1734501098000}'),i={name:"分类出题指南/3. 分类/PWN（二进制安全）/上传内容标准/Dockerfile 文件内容制作指南.md"};function t(c,a,r,d,h,g){return p(),s("div",null,a[0]||(a[0]=[n('<h1 id="dockerfile-文件内容制作指南" tabindex="-1">Dockerfile 文件内容制作指南 <a class="header-anchor" href="#dockerfile-文件内容制作指南" aria-label="Permalink to &quot;Dockerfile 文件内容制作指南&quot;">​</a></h1><h2 id="文件下载" tabindex="-1">文件下载 <a class="header-anchor" href="#文件下载" aria-label="Permalink to &quot;文件下载&quot;">​</a></h2><p><a href="../%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/docker-pwn.zip">docker-pwn.zip</a></p><h2 id="文件包结构" tabindex="-1">文件包结构 <a class="header-anchor" href="#文件包结构" aria-label="Permalink to &quot;文件包结构&quot;">​</a></h2><p>文件包内应确保具有如下的文件。</p><p><img src="'+l+`" alt=""></p><ol><li>docker-compose.yml – Docker-Compose 描述文件</li><li>pwn1 – 服务构建文件夹，下有 Dockerfile文件和构建所需的challenge文件夹</li></ol><h2 id="docker-compose-yml" tabindex="-1">docker-compose.yml <a class="header-anchor" href="#docker-compose-yml" aria-label="Permalink to &quot;docker-compose.yml&quot;">​</a></h2><p>Docker-Compose 描述文件, 内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>version: &quot;3&quot;</span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>  ctfpwn:</span></span>
<span class="line"><span>    build: ./pwn1/</span></span>
<span class="line"><span>    image: pwn1</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - &quot;9999:9999&quot;</span></span></code></pre></div><p><strong>此处仅允许 image, build, ports，禁止其他字段出现，如果有 volume，cmd 等设置需求，请在 Dockerfile 里进行文件拷贝或者申明！！！</strong></p><p><strong>此处仅允许 image, build, ports，禁止其他字段出现，如果有 volume，cmd 等设置需求，请在 Dockerfile 里进行文件拷贝或者申明！！！</strong></p><p><strong>此处仅允许 image, build, ports，禁止其他字段出现，如果有 volume，cmd 等设置需求，请在 Dockerfile 里进行文件拷贝或者申明！！！</strong></p><p><strong>ports 里映射的镜像端口请务必保证正确！</strong></p><h2 id="challenge文件夹" tabindex="-1">challenge文件夹 <a class="header-anchor" href="#challenge文件夹" aria-label="Permalink to &quot;challenge文件夹&quot;">​</a></h2><p>challenge作为子文件夹里面存放entrypoint.sh脚本、pwn程序和其依赖的动态链接库(ld*和lib*)。</p><p>entrypoint.sh里使用 ./ 相对路径运行pwn程序。entrypoint.sh文件名不可修改！</p><p>entrypoint.sh 样例如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>./pwn</span></span></code></pre></div><p>需要将pwn程序依赖的ld*和所有的lib*放到challenge目录下，无需手动patch。具体是哪些文件可使用ldd命令查看：</p><p><img src="`+o+`" alt=""></p><h2 id="dockerfile-文件" tabindex="-1">Dockerfile 文件 <a class="header-anchor" href="#dockerfile-文件" aria-label="Permalink to &quot;Dockerfile 文件&quot;">​</a></h2><p>非特殊原因，请勿修改 Dockerfile 内容。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FROM ghcr.io/dasctf-offical/docker-template-for-pwn-base:main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>COPY ./challenge/ /root/challenge</span></span>
<span class="line"><span></span></span>
<span class="line"><span># EXPOSE 9999</span></span>
<span class="line"><span># 基础镜像默认对外暴露9999端口</span></span></code></pre></div><h2 id="其他注意事项" tabindex="-1">其他注意事项 <a class="header-anchor" href="#其他注意事项" aria-label="Permalink to &quot;其他注意事项&quot;">​</a></h2><p>如果使用另外的 Dockerfile ，需要特别注意几点：</p><p>1. FROM 的基础镜像只允许是：</p><ol><li>Dockerhub上不带 / 的官方镜像</li><li>官方组织下的镜像，比如 <code>ghcr.io/dasctf-offical/</code>等</li></ol><p><strong>其他镜像一律不允许使用。</strong></p><p><strong>其他镜像一律不允许使用。</strong></p><p><strong>其他镜像一律不允许使用。</strong></p><p>2. 如果有CMD 及其附属的启动脚本，<strong>禁止使用</strong>输出文字等方式来保持运行。</p><p>比如</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>while true; do</span></span>
<span class="line"><span>  echo &#39;1&#39;</span></span>
<span class="line"><span>done</span></span></code></pre></div><p>禁止使用这种输出日志的方式来保持运行。</p><p>禁止使用这种输出日志的方式来保持运行。</p><p>禁止使用这种输出日志的方式来保持运行。</p>`,37)]))}const u=e(i,[["render",t]]);export{k as __pageData,u as default};
