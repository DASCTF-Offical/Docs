import{_ as a,c as n,a2 as p,o as e}from"./chunks/framework.BQmytedh.js";const l="/assets/Dockerfile%20%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%88%B6%E4%BD%9C%E6%8C%87%E5%8D%97_image.Ab9DjAnL.png",u=JSON.parse('{"title":"Dockerfile 文件内容制作指南","description":"","frontmatter":{},"headers":[],"relativePath":"分类出题指南/3. 分类/PWN-AWD（二进制安全-AWD）/上传内容标准/Dockerfile 文件内容制作指南.md","filePath":"分类出题指南/3. 分类/PWN-AWD（二进制安全-AWD）/上传内容标准/Dockerfile 文件内容制作指南.md","lastUpdated":1734019302000}'),c={name:"分类出题指南/3. 分类/PWN-AWD（二进制安全-AWD）/上传内容标准/Dockerfile 文件内容制作指南.md"};function i(t,s,o,r,d,m){return e(),n("div",null,s[0]||(s[0]=[p('<h1 id="dockerfile-文件内容制作指南" tabindex="-1">Dockerfile 文件内容制作指南 <a class="header-anchor" href="#dockerfile-文件内容制作指南" aria-label="Permalink to &quot;Dockerfile 文件内容制作指南&quot;">​</a></h1><h2 id="文件下载" tabindex="-1">文件下载 <a class="header-anchor" href="#文件下载" aria-label="Permalink to &quot;文件下载&quot;">​</a></h2><p><a href="../%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/awd-docker-update.zip">awd-docker-update.zip</a></p><h2 id="和-pwn-题的不同" tabindex="-1">和 PWN 题的不同 <a class="header-anchor" href="#和-pwn-题的不同" aria-label="Permalink to &quot;和 PWN 题的不同&quot;">​</a></h2><p>把 SSH 打开，账号 <strong>ctf（运维账户，给到程序文件的修改权限）</strong>，密码 1qazcde3!@#。原因：<strong>flag文件需要保留，接收 DASFLAG 作为flag，因为这个靶机既要作为攻击靶机（SSH信息不展示），也要作为防守靶机（SSH信息要展示）。</strong></p><h2 id="文件包结构" tabindex="-1">文件包结构 <a class="header-anchor" href="#文件包结构" aria-label="Permalink to &quot;文件包结构&quot;">​</a></h2><p>文件包内应确保具有如下的文件。</p><p><img src="'+l+`" alt=""></p><ol><li>docker-compose.yml – Docker-Compose 描述文件</li><li>pwn1 – 服务构建文件，下有 Dockerfile 和构建所需的文件等</li></ol><h2 id="docker-compose-yml" tabindex="-1">docker-compose.yml <a class="header-anchor" href="#docker-compose-yml" aria-label="Permalink to &quot;docker-compose.yml&quot;">​</a></h2><p>Docker-Compose 描述文件, 内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>version: &quot;3&quot;</span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>  ctfpwn:</span></span>
<span class="line"><span>    build: ./pwn1/</span></span>
<span class="line"><span>    image: pwn1</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - &quot;9999:9999&quot;</span></span>
<span class="line"><span>      - &quot;9922:22&quot;</span></span></code></pre></div><p><strong>此处仅允许 image, build, ports，禁止其他字段出现，如果有 volume，cmd 等设置需求，请在 Dockerfile 里进行文件拷贝或者申明！！！</strong></p><p><strong>此处仅允许 image, build, ports，禁止其他字段出现，如果有 volume，cmd 等设置需求，请在 Dockerfile 里进行文件拷贝或者申明！！！</strong></p><p><strong>此处仅允许 image, build, ports，禁止其他字段出现，如果有 volume，cmd 等设置需求，请在 Dockerfile 里进行文件拷贝或者申明！！！</strong></p><p><strong>ports 里映射的镜像端口请务必保证正确！</strong></p><h2 id="pwn1" tabindex="-1">pwn1 <a class="header-anchor" href="#pwn1" aria-label="Permalink to &quot;pwn1&quot;">​</a></h2><p>服务构建文件，下有 Dockerfile 和构建所需的文件等。</p><p>Dockerfile 内容参考样例如下：</p><p>1.样例1</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FROM ubuntu:22.04</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 使用 Tsinghua 镜像源并更新系统</span></span>
<span class="line"><span>RUN sed -i &quot;s|http://archive.ubuntu.com|http://mirrors.tuna.tsinghua.edu.cn|g&quot; /etc/apt/sources.list &amp;&amp; \\</span></span>
<span class="line"><span>    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \\</span></span>
<span class="line"><span>    apt-get install -y lib32z1 xinetd openssh-server curl</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加 ctf 用户</span></span>
<span class="line"><span>RUN useradd -m ctf</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置 SSH 访问的密码</span></span>
<span class="line"><span>RUN echo &#39;ctf:1qazcde3!@#&#39; | chpasswd</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 配置 SSH 目录和权限</span></span>
<span class="line"><span>RUN mkdir /var/run/sshd &amp;&amp; \\</span></span>
<span class="line"><span>    echo &#39;PasswordAuthentication yes&#39; &gt;&gt; /etc/ssh/sshd_config &amp;&amp; \\</span></span>
<span class="line"><span>    echo &#39;PermitRootLogin no&#39; &gt;&gt; /etc/ssh/sshd_config</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置工作目录</span></span>
<span class="line"><span>WORKDIR /home/ctf</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 复制必要的库文件</span></span>
<span class="line"><span>RUN cp -R /usr/lib* /home/ctf</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建 /dev 目录并设置节点</span></span>
<span class="line"><span>RUN mkdir /home/ctf/dev &amp;&amp; \\</span></span>
<span class="line"><span>    mknod /home/ctf/dev/null c 1 3 &amp;&amp; \\</span></span>
<span class="line"><span>    mknod /home/ctf/dev/zero c 1 5 &amp;&amp; \\</span></span>
<span class="line"><span>    mknod /home/ctf/dev/random c 1 8 &amp;&amp; \\</span></span>
<span class="line"><span>    mknod /home/ctf/dev/urandom c 1 9 &amp;&amp; \\</span></span>
<span class="line"><span>    chmod 666 /home/ctf/dev/*</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建 /bin 目录并复制必要的二进制文件</span></span>
<span class="line"><span>RUN mkdir /home/ctf/bin &amp;&amp; \\</span></span>
<span class="line"><span>    cp /bin/sh /home/ctf/bin &amp;&amp; \\</span></span>
<span class="line"><span>    cp /bin/ls /home/ctf/bin &amp;&amp; \\</span></span>
<span class="line"><span>    cp /bin/cat /home/ctf/bin</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 复制配置文件和程序</span></span>
<span class="line"><span>COPY ./ctf.xinetd /etc/xinetd.d/ctf</span></span>
<span class="line"><span>COPY ./start.sh /start.sh</span></span>
<span class="line"><span>COPY ./pwn /home/ctf/pwn</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置脚本和目录的权限</span></span>
<span class="line"><span>RUN chmod +x /start.sh</span></span>
<span class="line"><span>RUN chown -R root:ctf /home/ctf &amp;&amp; chmod -R 770 /home/ctf</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置环境变量</span></span>
<span class="line"><span>ENV DASFLAG DASCTF{test_flag}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 启动脚本</span></span>
<span class="line"><span>CMD service ssh start &amp;&amp; /start.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 暴露端口</span></span>
<span class="line"><span>EXPOSE 9999</span></span>
<span class="line"><span>EXPOSE 22</span></span></code></pre></div><p>需要特别注意几点：</p><p>1. FROM 的基础镜像只允许是：</p><ol><li>Dockerhub上不带 / 的官方镜像</li><li>dasctfbase 组织下的镜像，比如 <code>dasctfbase/web_php73_apache_mysql</code> 等</li><li><a href="https://github.com/orgs/DASCTF-Offical/packages" target="_blank" rel="noreferrer">https://github.com/orgs/DASCTF-Offical/packages</a> 里的镜像，也就是 ghcr.io/dasctf-offical/ 开头的镜像</li></ol><p><strong>其他镜像一律不允许使用。</strong></p><p><strong>其他镜像一律不允许使用。</strong></p><p><strong>其他镜像一律不允许使用。</strong></p><p>2. 请设置一个 DASFLAG 环境变量来作为预置的 flag 以供测试。</p><p><code>ENV DASFLAG DASCTF{test12345}</code></p><p>3. 请正确声明容器对外暴露的端口。</p><p><code>EXPOSE 80</code></p><p>4. CMD 及其附属的启动脚本<strong>禁止使用</strong>输出文字等方式来保持运行。</p><p>比如</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>while true; do</span></span>
<span class="line"><span>  echo &#39;1&#39;</span></span>
<span class="line"><span>done</span></span></code></pre></div><p>禁止使用这种输出日志的方式来保持运行。</p><p>禁止使用这种输出日志的方式来保持运行。</p><p>禁止使用这种输出日志的方式来保持运行。</p>`,37)]))}const g=a(c,[["render",i]]);export{u as __pageData,g as default};
