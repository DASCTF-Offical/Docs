"use strict";
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = function(target, all) {
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = function(to, from, except, desc) {
    if (from && (typeof from === "undefined" ? "undefined" : _type_of(from)) === "object" || typeof from === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toESM = function(mod, isNodeMode, target) {
    return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod);
};
var __toCommonJS = function(mod) {
    return __copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
};
// src/index.ts
var src_exports = {};
__export(src_exports, {
    default: function() {
        return AutoNavPlugin;
    }
});
module.exports = __toCommonJS(src_exports);
// src/utils/fileHelper.ts
var import_path = __toESM(require("path"), 1);
var import_fs = require("fs");
// src/utils/stringTemplate.ts
var commonTop = function(config) {
    return "---\ntitle: " + config.title + "\n---\n## 该章节包含以下内容";
};
var READMETemplate = function(config, title) {
    if (config["files"].length === 0 && config["folders"].length === 0) return "";
    return commonTop({
        title: title
    }) + "\n  \n  " + config["files"].map(function(item) {
        return "\n- [".concat(item.replace(".md", ""), "](").concat(item, ")\n\n  ");
    }).join("") + config["folders"].map(function(item) {
        var itemsTemplate = item.items.map(function(child) {
            if (typeof child === "string") {
                return "\n        - [".concat(child.replace(".md", ""), "](").concat(item.link + "/" + child, ")\n        \n          ");
            }
            return "";
        }).join("");
        return "\n#### [".concat(item.title, "](").concat(item.link, ")\n    ") + itemsTemplate;
    }).join("");
};
var stringTemplate_default = {
    READMETemplate: READMETemplate
};
// src/defaultConfig.ts
var defaultOptions = {
    entry: "docs",
    ignoreFolders: [],
    ignoreFiles: [],
    dirPrefix: "\u{1F4C2}  ",
    filePrefix: "\u270F\uFE0F  ",
    showNavIcon: true,
    showSideIcon: false,
    isCollapsible: true,
    collapsed: false,
    singleLayerNav: false,
    customParentFolderName: "",
    hiddenFilePrefix: "."
};
function setOptions(options3) {
    defaultOptions = Object.assign(defaultOptions, options3);
}
function getOptions() {
    return defaultOptions;
}
// src/utils/fileHelper.ts
var getCurFiles = function(dir) {
    var SuffixIncludes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], unFileIncludes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    if (!dir) return [];
    var filenameList = (0, import_fs.readdirSync)(dir).sort().filter(function(filename) {
        var fileInfo = (0, import_fs.statSync)(import_path.default.join(dir, filename));
        var suffix = filename.slice(filename.lastIndexOf(".") + 1);
        return fileInfo.isFile() && SuffixIncludes.includes(suffix) && isNotReadme(filename) && !unFileIncludes.includes(filename);
    });
    return filenameList;
};
var isNotReadme = function(filename) {
    return filename.toLocaleLowerCase() !== "readme.md";
};
var getAllDirs = function() {
    var dir = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ".", unDirIncludes = arguments.length > 1 ? arguments[1] : void 0;
    if (!dir) return [];
    var items = (0, import_fs.readdirSync)(dir);
    var allDirs = [];
    items.forEach(function(item) {
        var dirName = import_path.default.join(dir, item);
        if ((0, import_fs.statSync)(dirName).isDirectory() && !unDirIncludes.includes(item)) {
            allDirs.push(dirName);
            allDirs = allDirs.concat(getAllDirs(dirName, unDirIncludes));
        }
    });
    return allDirs;
};
var getCurDirs = function() {
    var dir = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ".";
    if (!dir) return [];
    var options3 = getOptions();
    var items = (0, import_fs.readdirSync)(dir);
    var allCurDirs = [];
    items.forEach(function(item) {
        var _options3_ignoreFolders;
        var dirName = import_path.default.join(dir, item);
        if ((0, import_fs.statSync)(dirName).isDirectory() && !((_options3_ignoreFolders = options3.ignoreFolders) === null || _options3_ignoreFolders === void 0 ? void 0 : _options3_ignoreFolders.includes(item))) {
            allCurDirs.push(dirName);
        }
    });
    return allCurDirs;
};
var createREADME = function(dir) {
    var options3 = getOptions();
    var configs = {
        files: getCurFiles(dir, [
            "md"
        ], options3.ignoreFiles),
        folders: getCurDirs(dir).map(function(item) {
            return {
                title: item.substring(item.lastIndexOf("/") + 1),
                link: item.replace(dir, "."),
                items: getCurFiles(item, [
                    "md"
                ], options3.ignoreFiles) || []
            };
        })
    };
    var content = stringTemplate_default.READMETemplate(configs, dir.substring(dir.lastIndexOf("/") + 1));
    var file = import_path.default.join(dir, "./README.md");
    (0, import_fs.writeFileSync)(file, content);
};
var hasSubDirs = function(path2) {
    return getCurDirs(path2).length > 0;
};
var getMdFiles = function(path2) {
    var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    if (!path2) return [];
    var options3 = getOptions();
    var files = getCurFiles(path2, [
        "md"
    ], options3.ignoreFiles);
    return files.map(function(item) {
        return prefix + item;
    });
};
var getDirNameByPath = function(dir) {
    return dir.substring(dir.lastIndexOf(import_path.default.sep) + 1);
};
var getFileNameByPath = function(dir) {
    return dir.substring(dir.lastIndexOf(import_path.default.sep) + 1, dir.lastIndexOf("."));
};
var hasIndexMd = function(path2) {
    if (!path2) return false;
    return getCurFiles(path2, [
        "md"
    ]).map(function(item) {
        return getFileNameByPath(item);
    }).includes("index");
};
var fileHelper_default = {
    getCurFiles: getCurFiles,
    getAllDirs: getAllDirs,
    getCurDirs: getCurDirs,
    createREADME: createREADME,
    hasSubDirs: hasSubDirs,
    getMdFiles: getMdFiles,
    getFileNameByPath: getFileNameByPath,
    getDirNameByPath: getDirNameByPath,
    hasIndexMd: hasIndexMd
};
// src/common.ts
var options = getOptions();
function getFilterCurFolder(path2) {
    return fileHelper_default.getCurDirs(path2).sort().filter(function(item) {
        var _options_ignoreFolders;
        return !((_options_ignoreFolders = options.ignoreFolders) === null || _options_ignoreFolders === void 0 ? void 0 : _options_ignoreFolders.includes(fileHelper_default.getDirNameByPath(item)));
    });
}
function getFilterCurMDFile(path2) {
    var hiddenFilePrefix = options.hiddenFilePrefix, ignoreFiles = options.ignoreFiles;
    return fileHelper_default.getMdFiles(path2).sort().filter(function(item) {
        var fileName = fileHelper_default.getFileNameByPath(item);
        return !((ignoreFiles === null || ignoreFiles === void 0 ? void 0 : ignoreFiles.includes(fileName)) || fileName.startsWith(hiddenFilePrefix || "."));
    });
}
function formatText(text, target, type) {
    if (target === "nav") {
        return options.showNavIcon ? "".concat(options["".concat(type, "Prefix")]).concat(text) : text;
    }
    return options.showSideIcon ? "".concat(options["".concat(type, "Prefix")]).concat(text) : text;
}
// src/handleNav.ts
var options2 = getOptions();
var getNav = function(path2) {
    var arr = [];
    getFilterCurFolder(path2).forEach(function(dir) {
        var text = fileHelper_default.getDirNameByPath(dir);
        if (options2.singleLayerNav) {
            if (fileHelper_default.hasIndexMd(dir)) {
                arr.push({
                    text: formatText(text, "nav", "dir"),
                    link: "/" + text + "/"
                });
            } else {
                var firstFile = getFilterCurMDFile(dir)[0];
                if (!firstFile) {
                    var firstFolder = getFilterCurFolder(dir)[0];
                    var firstFolderFirstFile = getFilterCurMDFile(firstFolder)[0];
                    if (firstFolder && firstFolderFirstFile) {
                        firstFile = "".concat(fileHelper_default.getDirNameByPath(firstFolder), "/").concat(fileHelper_default.getFileNameByPath(firstFolderFirstFile));
                    }
                }
            }
        } else {
            var subFolders = getFilterCurFolder(dir).filter(function(item) {
                return getFilterCurMDFile(item).length > 0;
            });
            var folderItems = subFolders.map(function(subFolderPath) {
                var subFolderText = fileHelper_default.getDirNameByPath(subFolderPath);
                var firstFile = getFilterCurMDFile(subFolderPath)[0];
                return {
                    text: formatText(subFolderText, "nav", "dir"),
                    link: "/" + text + "/" + subFolderText + "/" + (firstFile ? fileHelper_default.getFileNameByPath(firstFile) : "")
                };
            });
            var subFiles = getFilterCurMDFile(dir).map(function(item) {
                return fileHelper_default.getFileNameByPath(item);
            });
            var fileItems = subFiles.map(function(subFileText) {
                return {
                    text: formatText(subFileText, "nav", "file"),
                    link: "/" + text + "/" + subFileText
                };
            });
            arr.push({
                text: formatText(text, "nav", "dir"),
                items: _to_consumable_array(fileItems).concat(_to_consumable_array(folderItems))
            });
        }
    });
    var files = [];
    if ((files = getFilterCurMDFile(path2).map(function(item) {
        return fileHelper_default.getFileNameByPath(item);
    })).length > 0) {
        files.forEach(function(item) {
            arr.push({
                text: formatText(item, "nav", "file"),
                link: "/" + item
            });
        });
    }
    return arr;
};
// src/index.ts
var import_path2 = require("path");
// src/handleSider.ts
var getSidebar = function(path2) {
    var options3 = getOptions();
    var sidebar = {};
    getFilterCurFolder(path2).sort().forEach(function(dir) {
        var folderText = fileHelper_default.getDirNameByPath(dir);
        var propName = "/" + folderText + "/";
        var subFolders = getFilterCurFolder(dir).filter(function(item) {
            return getFilterCurMDFile(item).length > 0;
        });
        var folderItems = subFolders.map(function(subFolderPath) {
            var subText = fileHelper_default.getDirNameByPath(subFolderPath);
            var subSubFolderName = getFilterCurFolder(subFolderPath).map(function(item) {
                return fileHelper_default.getDirNameByPath(item);
            });
            var subSubFileName = getFilterCurMDFile(subFolderPath).map(function(item) {
                return fileHelper_default.getFileNameByPath(item);
            });
            return {
                text: formatText(subText, "sidebar", "dir"),
                collapsible: options3.isCollapsible,
                collapsed: options3.collapsed,
                items: _to_consumable_array(subSubFolderName.map(function(item) {
                    return {
                        text: formatText(item, "sidebar", "dir"),
                        link: propName + subText + "/" + item + "/"
                    };
                })).concat(_to_consumable_array(subSubFileName.map(function(item) {
                    return {
                        text: formatText(item, "sidebar", "file"),
                        link: propName + subText + "/" + item
                    };
                })))
            };
        });
        sidebar[propName] = _to_consumable_array(folderItems);
        var subFiles = getFilterCurMDFile(dir).map(function(item) {
            return fileHelper_default.getFileNameByPath(item);
        });
        console.log("dir:", dir);
        if (subFiles.length > 0) {
            var fileItems = subFiles.map(function(item) {
                return {
                    text: formatText(item, "sidebar", "file"),
                    link: propName + "/" + item
                };
            });
            var parentFolderName = options3.customParentFolderName && options3.customParentFolderName !== "" ? options3.customParentFolderName : dir.substring(dir.lastIndexOf("/") + 1);
            sidebar[propName].unshift({
                text: formatText(parentFolderName, "sidebar", "dir"),
                collapsible: options3.isCollapsible,
                collapsed: options3.collapsed,
                items: fileItems
            });
        }
    });
    return sidebar;
};
// src/index.ts
function AutoNavPlugin(options3) {
    if (!options3) options3 = defaultOptions;
    var assignOptions = Object.assign({}, defaultOptions, options3);
    setOptions(assignOptions);
    var _assignOptions_entry;
    var path2 = (0, import_path2.resolve)(process.cwd(), (_assignOptions_entry = assignOptions.entry) !== null && _assignOptions_entry !== void 0 ? _assignOptions_entry : "docs");
    return {
        nav: getNav(path2),
        sidebar: getSidebar(path2)
    };
}
